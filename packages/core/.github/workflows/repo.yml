name: Build & Test

on:
  # push:
  pull_request:
    types: [opened, synchronize]

env:
  NODE_VERSION: 18.x

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Triggered by ${{ github.event_name }} event."

      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Installing dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: borales/actions-yarn@v4
        with:
          cmd: install --frozen-lockfile

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build
        uses: borales/actions-yarn@v4
        with:
          cmd: build

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Test
        uses: borales/actions-yarn@v4
        with:
          cmd: test

  publish:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
  
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
  
      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
  
      - name: Prepare version for publish
        run: |
          PR_NUMBER=$(echo ${{ github.event.number }})
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Ensure we have the full history to accurately count commits
          git fetch --prune --unshallow || git fetch --depth=1 origin master:refs/remotes/origin/master
          # Count the number of commits on the current branch
          COMMIT_COUNT=$(($(git log master..HEAD --oneline | wc -l) - 1))
          NEW_VERSION="${CURRENT_VERSION}-dev.${PR_NUMBER}.${COMMIT_COUNT}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
  
      - name: Echo version for testing
        run: |
          echo "Version to publish: $NEW_VERSION"