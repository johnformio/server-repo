name: CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    tags:
      - '*' # This will make sure tag creations also trigger the workflow.

env:
  NODE_VERSION: 20.x
  NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
  NPM_USERNAME: ${{ secrets.NPM_USERNAME }}
  NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
  FILTER_ACCESS: false
  TEST_SUITE: 1
  PROTOCOL: http
  DOMAIN: localhost
  PORT: 3000
  MONGO: mongodb://localhost:27017/formio-test
  PDF_SERVER: http://localhost:4005
  PROJECT_PLAN: trial
  DROPBOX_CLIENTID: clientid123
  DROPBOX_CLIENTSECRET: clientsecret123
  ADMIN_EMAIL: admin@example.com
  ADMIN_PASS: CHANGEME
  ADMIN_KEY: thisIsMyXAdminKey
  LICENSE_REMOTE: true
  LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
  FORMIO_PDF_PROJECT: https://pdf.test-form.io
  FORMIO_PDF_APIKEY: ${{ secrets.FORMIO_PDF_APIKEY }}
  PORTAL_SECRET: 123secret123
  DB_SECRET: 123secret123
  JWT_SECRET: 123secret123

jobs:
  ###########################################################################
  ## Portal
  ###########################################################################
  portal:
    if: true
    runs-on: ubuntu-latest
    env:
      ENABLE_ARTIFACTS: true
    steps:
      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Install awscli
        run: |
          sudo apt-get update
          sudo apt install -y awscli

      - name: Download Portal
        env:
          AWS_DEFAULT_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp s3://formio-app-releases/$(node -e "console.log(require('./package.json').portalVersion)").tgz portal.tgz
          mkdir -p build/portal
          tar -zxvf portal.tgz -C build/portal

      - name: Archive portal workspace
        if: env.ENABLE_ARTIFACTS == 'true'
        run: |
          tar -czf portal.tar.gz -C build/portal .

      - name: Upload portal artifacts
        if: env.ENABLE_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: portal
          path: portal.tar.gz
  ###########################################################################
  ## Build
  ###########################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Triggered by ${{ github.event_name }} event."

      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Installing dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: borales/actions-yarn@v4
        with:
          cmd: install --frozen-lockfile

      - name: Lint
        uses: borales/actions-yarn@v4
        with:
          cmd: lint
      
      - name: Clean
        uses: borales/actions-yarn@v4
        with:
          cmd: clean

      - name: Build
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Show build directory contents
        run: |
          ls -R ./build

      - name: Cache build directory
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('build.tgz') }}
          restore-keys: |
            ${{ runner.os }}-build-
  ###########################################################################
  ## Test
  ###########################################################################
  ## Current Branch
  test-current:    
    needs: build
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - run: echo "Triggered by ${{ github.event_name }} event."
      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Test
        if: true
        uses: borales/actions-yarn@v4
        with:
          cmd: test

  ## Target Branch
  test-target:    
    needs: build
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - run: echo "Triggered by ${{ github.event_name }} event."
      - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config --global user.email "pkgbot@form.io"
          git config --global user.name "pkgbot"

      - name: Merge target branch into current branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
          git merge ${{ github.event.pull_request.base.ref }} --no-commit --no-ff
  
      - name: Check for merge conflicts
        run: |
          if ! git merge --no-commit --no-ff ${{ github.event.pull_request.base.ref }}; then
            echo "Merge conflicts detected."
            git merge --abort
            exit 1
          else
            echo "Merge successful."
          fi

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Test
        if: true
        uses: borales/actions-yarn@v4
        with:
          cmd: test
  ###########################################################################
  ## Docker
  ###########################################################################
  docker:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, test-current, test-target]
    runs-on: ubuntu-latest
    env:
      NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
      NPM_USERNAME: ${{ secrets.NPM_USERNAME }}
      NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
      IMAGE_PATH: formio/formio-enterprise
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: ${{ secrets.SNYK_CICD_ORGANIZATION }}
    steps:
    - run: echo "Triggered by ${{ github.event_name }} event."
    - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
      uses: actions/checkout@v3

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore node modules from cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Run build
      uses: borales/actions-yarn@v4
      with:
        cmd: build

    - name: Download portal archive
      uses: actions/download-artifact@v3
      with:
        name: portal
    
    - name: Create the portal directory
      run: mkdir -p ${{ github.workspace }}/build/portal

    - name: Unpack portal archive
      run: |
        tar -xzf portal.tar.gz -C ${{ github.workspace }}/build/portal   

    - name: Build Temp image
      run: |
        docker build --no-cache -t tmpimage --build-arg NPM_USERNAME=$NPM_USERNAME --build-arg NPM_PASSWORD=$NPM_PASSWORD --build-arg NPM_EMAIL=$NPM_EMAIL -f deployment/docker/Builder .
    
    - name: Create tmpcontainer
      run: docker create -ti --name tmpcontainer tmpimage sh
    
    - name: Copy container
      run: docker cp tmpcontainer:/src/node_modules build/
        
    - name: Clean up
      run: docker rm -f tmpcontainer
      
    - name: Multi Stage
      run: docker build --no-cache -t $IMAGE_PATH -f deployment/docker/Dockerfile .
    
    - name: Build the Docker image
      run: docker build -f deployment/docker/Dockerfile -t $IMAGE_PATH:${{github.ref_name}} .

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Push image to DockerHub
      run: docker push $IMAGE_PATH:${{github.ref_name}}

    - name: Push image to ECR
      run: |
        docker login -u AWS -p $(aws ecr-public get-login-password --region us-east-1) public.ecr.aws/formio
        docker tag $IMAGE_PATH public.ecr.aws/$IMAGE_PATH:${{github.ref_name}}
        docker push public.ecr.aws/$IMAGE_PATH:${{github.ref_name}}

    - name: Run Snyk
      uses: snyk/actions/docker@master
      continue-on-error: true
      with:
        image: $IMAGE_PATH:${{github.ref_name}}
        args: --container $IMAGE_PATH:${{github.ref_name}} --app-vulns

    - name: Monitor Docker Image with Snyk
      if: true
      continue-on-error: true
      run: |
        npm install -g snyk
        snyk monitor --docker $IMAGE_PATH:${{github.ref_name}} --app-vulns
  ###########################################################################
  ## Commit to formio/enterprise
  ###########################################################################
  deploy_npm:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [docker, test-current, test-target]
    runs-on: ubuntu-latest

    steps:
    - run: echo "Triggered by ${{ github.event_name }} event."

    - name: Check out repository code ${{ github.repository }} on ${{ github.ref }}
      uses: actions/checkout@v3

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}
    
    - name: Download portal archive
      uses: actions/download-artifact@v3
      with:
        name: portal
    
    - name: Create the portal directory
      run: mkdir -p ${{ github.workspace }}/build/portal

    - name: Unpack portal archive
      run: |
        tar -xzf portal.tar.gz -C ${{ github.workspace }}/build/portal  

    # Restore Build cache
    - name: Restore build cache
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-build-${{ hashFiles('build.tgz') }}
        restore-keys: |
          ${{ runner.os }}-build-

    # Unpack caches and show contents (Assuming caches are restored correctly)
    - name: Show workspace contents
      run: |
        ls -R .

    - name: Clone formio-enterprise repository
      run: git clone --depth 1 git@github.com:formio/formio-enterprise.git

    - name: Remove portal directory
      run: rm -rf formio-enterprise/portal

    - name: Copy build artifacts
      run: cp -r build/* formio-enterprise/

    - name: View formio-enterprise directory
      run: |
        ls ./formio-enterprise

    - name: Commit changes
      run: |
        cd formio-enterprise
        git config user.email "formiobot@example.com"
        git config user.name "Formiobot"
        git add --all && git commit -am "${{ github.ref_name }}"
        git tag ${{ github.ref_name }}
        if [[ ${{ github.ref_name }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          git push
        fi
        git push --tags