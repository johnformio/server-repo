machine:
  pre:
    - sudo curl -L -o /usr/bin/docker 'https://s3-external-1.amazonaws.com/circle-downloads/docker-1.9.0-circleci'
    - sudo chmod 0755 /usr/bin/docker
  node:
    version: 4.4.5
  python:
    version: 2.7.3
  services:
    - docker
    - mongodb
    - redis
  environment:
    SHORT_SHA: $(echo $CIRCLE_SHA1 | cut -b1-7)
    TAG: ${CIRCLE_BRANCH:-$(echo $CIRCLE_TAG)}
    IMAGE_PATH: "formio/formio-server"
    AWS_DEFAULT_REGION: "us-west-2"
    MONGO: "mongodb://localhost:27017/formio"

dependencies:
  pre:
    - sudo /etc/init.d/mongodb stop && wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1204-3.2.6.tgz && tar xvzf mongodb-linux-x86_64-ubuntu1204-3.2.6.tgz
    - sudo cp mongodb-linux-x86_64-ubuntu1204-3.2.6/bin/* /usr/bin
    - sudo /etc/init.d/mongodb start
    - pip install awscli
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update
    - sudo apt-get install -y gcc-4.9 g++-4.9
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 10
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 10
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 20
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 20
  override:
    - echo $TAG_NAME
    - ./serverSetup.sh
    - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
    - docker build -t $IMAGE_PATH -f deployment/docker/formio-server/Dockerfile .
  post:
    - ./deployment/scripts/importDb.sh formio

test:
  pre:
    - node --version
    - mongo --version
    - docker --version
    - sudo bash -c "echo \"127.0.0.1 formio.localhost\" >> /etc/hosts"
    - sudo bash -c "echo \"127.0.0.1 api.localhost\" >> /etc/hosts"
    - sudo bash -c "echo \"127.0.0.1 dockertest.localhost\" >> /etc/hosts"
    - npm i --g formio-cli
  override:
    # Test Formio locally.
    - sudo pkill redis-server
    - redis-server &> $CIRCLE_ARTIFACTS/redis.log:
          background: true
    - DEBUG=formio:*,formio:*:* DROPBOX_CLIENTID=NOTREAL npm test &> $CIRCLE_ARTIFACTS/formio-server.log
    # Test Formio in a docker environment.
    - sudo pkill redis-server
    - redis-server &> $CIRCLE_ARTIFACTS/docker-redis.log:
          background: true
    - docker run -d -e "MONGO1=$MONGO" -e "REDIS_ADDR=localhost" -e "REDIS_PORT=6379" -e "PROTOCOL=http" -e "DOMAIN=localhost" -e "PORT=3000" -e "DEBUG=formio:*,formio:*:*" -e "PROJECT_PLAN=basic" -e "DROPBOX_CLIENTID=NOTREAL" --name formio-server --net=host $IMAGE_PATH
    - sleep 5
    - docker logs formio-server
    - wget --tries=10 --retry-connrefused --wait=6 -v http://api.localhost:3000/health
    - npm run-script docker
    - docker logs formio-server &> $CIRCLE_ARTIFACTS/docker-server.log
    # Test Formio in a customer docker environment.
    - docker stop formio-server
    - docker rm formio-server
    - sudo pkill redis-server
    - sudo service mongodb stop
    - docker network create formio
    - docker run -itd --name formio-mongo --network formio -p 27017:27017 mongo
    - docker run -itd --name formio-redis --network formio -p 6379:6379 redis
    - docker run -itd -e "DEBUG=formio:*,formio:*:*" -e "PROJECT_PLAN=basic" -e "MONGO1=mongodb://mongo:27017/formio-docker" -e "PROTOCOL=http" -e "DOMAIN=localhost" -e "PORT=3000" -e "JWT_SECRET=CHANGEME" -e "JWT_EXPIRE_TIME=240" -e "DB_SECRET=CHANGEME" -e "ADMIN_EMAIL=dockertest@form.io" -e "ADMIN_PASS=testdockertest" --name formio-server --network formio --link formio-mongo:mongo -p 127.0.0.1:3000:3000 $IMAGE_PATH:$SHORT_SHA
    - sleep 5
    - docker logs formio-server
    - wget --tries=10 --retry-connrefused --wait=6 -v http://api.localhost:3000/health
    - formio deploy --src-username dockertest@form.io --src-password testdockertest --dst-username admin@example.com --dst-password CHANGEME https://dockertest.form.io http://dockertest.localhost:3000
    - npm run-script customer
    - docker logs formio-server &> $CIRCLE_ARTIFACTS/docker-customer-server.log

deployment:
  release:
    tag: /^\d+\.\d+\.\d+$/
    commands:
      - docker tag $IMAGE_PATH $IMAGE_PATH:$TAG
      - docker push $IMAGE_PATH
      - docker push $IMAGE_PATH:$TAG
      - ./deployment/scripts/createVersion.sh $TAG
  build:
    tag: /build-.*/
    commands:
      - docker tag $IMAGE_PATH $IMAGE_PATH:$TAG
      - docker push $IMAGE_PATH:$TAG
      - ./deployment/scripts/createVersion.sh $TAG
