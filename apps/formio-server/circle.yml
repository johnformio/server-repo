machine:
  pre:
    - curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0
  node:
    version: 6
  python:
    version: 2.7.3
  services:
    - docker
    - redis
  environment:
    SHORT_SHA: $(echo $CIRCLE_SHA1 | cut -b1-7)
    TAG: ${CIRCLE_BRANCH:-$(echo $CIRCLE_TAG)}
    IMAGE_PATH: "formio/formio-server"
    AWS_DEFAULT_REGION: "us-west-2"
    MONGO: "mongodb://localhost:27017/formio"

dependencies:
  pre:
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update
    - sudo apt-get install -y gcc-4.9 g++-4.9
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 20
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 20
  override:
    - sudo bash -c "echo \"127.0.0.1 formio.localhost\" >> /etc/hosts"
    - sudo bash -c "echo \"127.0.0.1 api.localhost\" >> /etc/hosts"
    - sudo bash -c "echo \"127.0.0.1 dockertest.localhost\" >> /etc/hosts"
    - npm install
    - pip install awscli

database:
  pre:
    - sudo service mongod stop
    - sleep 5
    - wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1204-3.4.10.tgz && tar xvzf mongodb-linux-x86_64-ubuntu1204-3.4.10.tgz
    - sudo cp -f mongodb-linux-x86_64-ubuntu1204-3.4.10/bin/* /usr/bin
    - sudo service mongod start
    - redis-server &> $CIRCLE_ARTIFACTS/redis.log:
          background: true

compile:
  pre:
    - npm i --g eslint-cli
  override:
    - npm run build
    # Test full suite against natively running server. Do it here so docker tests are skipped if fail.
    - npm test

test:
  pre:
    - node --version
    - mongo --version
    - docker --version
    - uname -r

  override:
    # Test Formio in a docker environment.
    - sudo service mongod stop
    - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
    - docker build --no-cache -t $IMAGE_PATH -f deployment/docker/formio-server/Dockerfile .
    - docker network create formio
    - docker network ls
    - docker run -itd --name formio-mongo --net formio -p 27017:27017 mongo
    - docker run -itd --name formio-redis --net formio -p 6380 redis
    - docker run -itd --name formio-server --net formio -e "DEBUG=formio:*" -e "PROJECT_PLAN=trial" -e "PROTOCOL=http" -e "DOMAIN=localhost" -e "PORT=3000" -e "JWT_SECRET=CHANGEME" -e "JWT_EXPIRE_TIME=240" -e "DB_SECRET=CHANGEME" -e "ADMIN_KEY=dockertest" --link formio-redis:redis --link formio-mongo:mongo -p 127.0.0.1:3000:3000 $IMAGE_PATH
    - docker ps -a
    - sleep 5
#    - ADMIN_KEY=dockertest node install
#    - curl -f --retry 10 http://api.localhost:3000/health
#    - npm run docker
#    - docker logs formio-server &> $CIRCLE_ARTIFACTS/docker-server.log
    # Test Formio as a client would run it.
    #- docker rm -vf formio-server
    #- docker rm -vf formio-mongo
    #- docker rm -vf formio-redis
    #- docker ps -a
    #- docker run -itd --name formio-mongo --net formio -p 27017:27017 mongo
    #- docker run -itd --name formio-redis --net formio -p 6380 redis
    #- docker run -itd --name formio-server --net formio -e "DEBUG=formio:*" -e "PROTOCOL=http" -e "DOMAIN=localhost" -e "PORT=3000" -e "JWT_SECRET=CHANGEME" -e "JWT_EXPIRE_TIME=240" -e "DB_SECRET=CHANGEME" -e "ACCESS_KEY=dockertest" --link formio-redis:redis --link formio-mongo:mongo -p 127.0.0.1:3000:3000 $IMAGE_PATH
    #- docker ps -a
    #- sleep 5
    #- curl -f --retry 10 http://api.localhost:3000/health
    #- npm run customer
    #- docker logs formio-server &> $CIRCLE_ARTIFACTS/customer-server.log

deployment:
  prerelease:
    tag: /^\d+\.\d+\.\d+(-.*)$/
    commands:
      - docker tag $IMAGE_PATH $IMAGE_PATH:$TAG
      - docker push $IMAGE_PATH:$TAG
      - ./deployment/scripts/createVersion.sh $TAG
  release:
    tag: /^\d+\.\d+\.\d+$/
    commands:
      - docker tag $IMAGE_PATH $IMAGE_PATH:$TAG
      - docker push $IMAGE_PATH
      - docker push $IMAGE_PATH:$TAG
      - ./deployment/scripts/createVersion.sh $TAG
